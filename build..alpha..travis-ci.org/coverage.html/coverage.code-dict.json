{"/home/travis/build/npmtest/node-npmtest-atomify/test.js":"/* istanbul instrument in package npmtest_atomify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-atomify/lib.npmtest_atomify.js":"/* istanbul instrument in package npmtest_atomify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_atomify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_atomify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-atomify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-atomify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_atomify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_atomify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_atomify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_atomify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_atomify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_atomify.__dirname + '/lib.npmtest_atomify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-atomify/node_modules/atomify/index.js":"var js = require('atomify-js')\n  , css = require('atomify-css')\n  , server = require('./lib/server')\n\nfunction callback (cb, type) {\n  if (!cb) return null\n\n  return function (err, src) {\n    cb(err, src, type)\n  }\n}\n\n\nfunction atomify (opts, cb) {\n  if (opts.assets && opts.css) opts.css.assets = opts.assets\n  if (opts.assets && opts.js) opts.js.assets = opts.assets\n\n  if (opts.server) return server(opts)\n  if (opts.css) css(opts.css, callback(cb, 'css'))\n  if (opts.js) js(opts.js, callback(cb, 'js'))\n}\n\natomify.js = js\natomify.css = css\natomify.server = server\n\nmodule.exports = atomify\n","/home/travis/build/npmtest/node-npmtest-atomify/node_modules/atomify/bin/atomify.js":"#!/usr/bin/env node\n\nvar path = require('path')\n  , cli = require('../lib/cli')\n  , args = process.argv.slice(2)\n  , argv = require('subarg')(args, {\n    alias: {\n      j: 'js'\n      , c: 'css'\n      , o: 'output'\n      , d: 'debug'\n      , h: 'help'\n      , v: 'version'\n      , s: 'server'\n    }\n  })\n\ncli(argv)\n","/home/travis/build/npmtest/node-npmtest-atomify/node_modules/atomify/lib/cli.js":"var js = require('atomify-js')\n  , css = require('atomify-css')\n  , fs = require('fs')\n  , path = require('path')\n  , writer = require('write-to-path')\n  , server = require('./server')\n  , pkgCfg = path.join(process.cwd(), 'package.json')\n\npkgCfg = fs.existsSync(pkgCfg) && require(pkgCfg).atomify ? require(pkgCfg).atomify : {}\n\nmodule.exports = function (args) {\n  if ((args._ && args._[0] === 'help') || args.help) {\n    return fs.createReadStream(__dirname + '/usage.txt')\n      .pipe(process.stdout)\n      .on('close', function () { process.exit(1) });\n  }\n\n  if (args.version) {\n    return console.log(require('../package.json').version);\n  }\n\n  args.css = args.css || pkgCfg.css || fs.existsSync('./index.css') && {entry: 'index.css'}\n  args.js = args.js || pkgCfg.js || fs.existsSync('./index.js') && {entry: 'index.js'}\n  args.server = args.server || pkgCfg.server\n\n  if (pkgCfg && pkgCfg.assets) {\n    if (args.css) args.css.assets = pkgCfg.assets\n    if (args.js) args.js.assets = pkgCfg.assets\n  }\n\n  if (args.css) {\n    args.css = parseArgs('css', args.css, args)\n\n    args.css.variables = args.css.v || args.css.variables\n    args.css.plugins = args.css.p || args.css.plugins\n    args.css.compress = args.css.c || args.css.compress\n\n    if (args.css.output) {\n      css(args.css, function doWatchWriteServerstart(err, src) {\n        if (err) console.error(err)\n        if (args.server) server(args)\n      });\n    }\n  }\n\n  if (args.js) {\n    args.js = parseArgs('js', args.js, args)\n\n    args.js.watch = args.js.w || args.js.watch\n    args.js.transforms = args.js.t || args.js.transform\n\n    if (args.js.output) js(args.js, writer(args.js.output, args.js))\n  }\n}\n\nfunction parseArgs (ext, child, parent) {\n  if (typeof child === 'string') child = {entry: child} // -j entry.js\n  if (child._) child.entry = child._[0] // -j [ entry.js ]\n  if (typeof child.e === 'string') child.entry = child.e // -j [ -e entry.js ]\n  if (Array.isArray(child.e)) child.entries = child.e // -j [ -e entry.js -e other.js ]\n\n  if (child.entry.indexOf(':') > 0) {\n    var pieces = child.entry.split(':')\n    child.entry = pieces[0]\n    child.alias = pieces[1]\n  }\n\n  child.debug = child.d || child.debug || parent.debug\n\n  child.output = child.o || child.output\n  if (child._ && child._.length === 2) child.output = child._[1] // -j [ entry.js bundle.js ]\n  if (!child.output && parent.output) child.output = parent.output.indexOf(ext) > 1 ? parent.output : parent.output + '.' + ext\n\n  if (!child.output && !parent.server) {\n    console.error('No output path provided for ' + ext.toUpperCase() + ' bundle!')\n    process.exit(1)\n  }\n\n  return child;\n}\n","/home/travis/build/npmtest/node-npmtest-atomify/node_modules/atomify/server.js":"module.exports = require('./lib/server')\n","/home/travis/build/npmtest/node-npmtest-atomify/node_modules/atomify/lib/server.js":"'use strict'\n\nvar st = require('st')\n  , http = require('http')\n  , path = require('path')\n  , url = require('url')\n  , fs = require('fs')\n  , os = require('os')\n  , js = require('atomify-js')\n  , css = require('atomify-css')\n  , prettyError = require('prettify-error')\n  , ansiStyleFormat = require('style-format')\n  , cssFiles = require('atomify-css/css')\n  , lessFiles = require('atomify-css/less')\n  , open = require('open')\n  , browserSync = require('browser-sync').create()\n  , htmlifyError = require('./htmlifyError.js')\n  , defaultBundlePath = path.join(__dirname, '_bundle.js')\n  , JS_REPLACE = '__ATOMIFY_JS__'\n  , CSS_REPLACE = '__ATOMIFY_CSS__'\n  , HTML_HEAD = '<!doctype html><html><head>'\n    + '<meta charset=\"utf-8\">'\n    + '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">'\n    + '<meta name=\"viewport\" content=\"initial-scale=1,width=device-width,user-scalable=0\">'\n  , cwd = process.cwd()\n  , internals = {}\n  , baseUrl\n  , bs\n\ninternals.getDefaultHTML = function getDefaultHTML (args) {\n  var src = HTML_HEAD\n  src += '<title>generated by atomify</title>'\n  if (args.css.entry) src += '<link rel=\"stylesheet\" href=\"CSS\">'\n  src += '</head><body>'\n  src += '<script src=\"JS\"></script>'\n  src += '</body></html>'\n\n  src = src.replace('JS', args.js.alias)\n  src = src.replace('CSS', args.css.alias)\n\n  return src\n}\n\ninternals.customDefaultHTML = ''\n\ninternals.setCustomDefaultHTML = function setCustomDefaultHTML (file, args) {\n  var html = fs.readFileSync(file, {encoding: 'utf8'})\n    , shouldReplaceJS = html.indexOf(JS_REPLACE) > -1\n    , shouldReplaceCSS = html.indexOf(CSS_REPLACE) > -1\n\n  if (shouldReplaceCSS) html = html.replace(CSS_REPLACE, args.css.alias)\n  else html += '<link rel=\"stylesheet\" href=\"' + args.css.alias + '\">'\n\n  if (shouldReplaceJS) html = html.replace(JS_REPLACE, args.js.alias)\n  else html += '<script src=\"' + args.js.alias + '\"></script>'\n\n  internals.customDefaultHTML = html\n\n  return internals.customDefaultHTML\n}\n\ninternals.getCustomDefaultHTML = function getCustomDefaultHTML (req, args, callback) {\n  var html = args.server.html\n    , htmlIsFile = typeof html === 'string'\n\n  // bail early if there is no html option\n  if (!html) return void callback(null, null)\n\n  // if the html arg is a string, assume it's a file name\n  // if we've already cached this file, don't go read it again\n  if (htmlIsFile && html !== internals.customDefaultHTML) {\n    callback(null, internals.setCustomDefaultHTML(html, args))\n  }\n  else if (htmlIsFile){\n    callback(null, internals.customDefaultHTML)\n  }\n  // if the html arg isn't a string, it should be a function that returns html\n  else {\n    html({js: args.js.alias, css: args.css.alias, request: req.url}, callback)\n  }\n}\n\ninternals.logError = function logError (err) {\n  var prettyifiedErr = prettyError(err)\n\n  // if any of our custom error parsing fails, don't die\n  try {\n    // babel errors are really special, so give them custom error handling\n    if (err._babel) {\n      bs.logger.error(ansiStyleFormat('{red}' + err.toString() + '{reset}'))\n      console.error(err.codeFrame)\n    }\n    else {\n      bs.logger.error(prettyifiedErr || err)\n    }\n  }\n  catch (e) {\n    console.error(err)\n  }\n}\n\ninternals.sendError = function sendError (err, res) {\n  if (!res.headersSent) {\n    res.setHeader('Content-Type', 'text/html')\n    res.statusCode = 500\n  }\n\n  internals.logError(err)\n\n  try {\n    res.end(htmlifyError(err, {head: true}))\n  }\n  catch (e){\n    res.end('<pre>' + err.toString() + err.stack + '</pre>')\n  }\n\n  return true\n}\n\ninternals.serveDefaultPage = function serveDefaultPage (req, res, args) {\n  internals.getCustomDefaultHTML(req, args, function gotCustomDefaultHTML (err, html) {\n    var src = html || internals.getDefaultHTML(args)\n\n    res.setHeader('Content-Type', 'text/html')\n\n    if (err) internals.sendError(err, res)\n    else res.end(src)\n  })\n}\n\ninternals.parseSyncOptions = function parseSyncOptions (opts) {\n  if (!opts) return false\n  if (typeof opts === 'object') return opts\n\n  return {\n    clicks: true\n    , location: true\n    , forms: true\n    , scroll: true\n  }\n}\n\ninternals.getNormalizedPath = function getNormalizedPath (pathStr) {\n  if (!pathStr || pathStr.charAt(0) === '/') return pathStr\n\n  return '/' + pathStr\n}\n\ninternals.responder = function responder (type, res) {\n  return function response (err, src) {\n    if (err) return void internals.sendError(err, res)\n\n    if (!res.headersSent) res.setHeader('Content-Type', 'text/' + type)\n    res.end(src || err)\n  }\n}\n\ninternals.startFileWatch = function startFileWatch (lr, args) {\n  var watchedFiles = []\n    , addFile = function addFile (file) {\n      if (watchedFiles.indexOf(file) < 0){\n        watchedFiles.push(file)\n        browserSync.watch(file).on('change', function onCSSChanged () {\n          bs.logger.info('{cyan:CSS changed: {magenta:%s', path.relative(cwd, file))\n          browserSync.notify('CSS changed')\n          browserSync.reload(args.css.alias)\n        })\n      }\n    }\n\n  if (!lr.quiet) {\n    js.emitter.on('changed', function onJsChanged (filepath) {\n      bs.logger.info('{cyan:JS changed: {magenta:%s', path.relative(cwd, filepath))\n      browserSync.notify('Compiling, please wait!')\n    })\n  }\n\n  js.emitter.on('bundle', function onJSBundled (time) {\n    if (!lr.quiet) {\n      bs.logger.info('{grey:Bundle updated in {magenta:%s', time + 'ms')\n    }\n    // for JS, just reload the whole page\n    browserSync.reload()\n  })\n\n  cssFiles.emitter.on('file', addFile)\n  lessFiles.emitter.on('file', addFile)\n  addFile(args.css.entry)\n}\n\nmodule.exports = function server (args) {\n  // sometimes the hostname has a '.local' on it, sometimes it doesn't\n  var hostname = args.server.hostname || args.server.h ? os.hostname().replace(/\\.local$/, '') + '.local' : 'localhost'\n\n  args.server.url = args.server.url || 'http://' + hostname + ':1337/default'\n\n  var stOptions = args.server.st || {path: cwd, cache: false}\n    , mount = st(stOptions)\n    , parsedUrl = url.parse(args.server.url)\n    , port = args.server.port || parsedUrl.port\n    , serverPath = internals.getNormalizedPath(args.server.path || parsedUrl.path)\n    , lr = args.server.lr || args.server.l\n    , launch = args.server.open || args.server.o\n    , handler = args.server.handler || Function()\n    , spaMode = args.server.spaMode\n\n  if (args.server.sync || args.server.s) lr = {sync: true}\n\n  args.servePath = stOptions.path\n\n  // the router checks these, so they have to exist\n  args.js = args.js || {}\n  args.js.alias = internals.getNormalizedPath(args.js.alias || args.js.entry)\n  args.css = args.css || {}\n  args.css.alias = internals.getNormalizedPath(args.css.alias || args.css.entry)\n\n  baseUrl = parsedUrl.protocol + '//' + parsedUrl.hostname\n\n  // cache the browserify and watchify instances\n  js.emitter.on('browserify', function storeBrowserifyInstace (b) {\n    internals.browserify = b\n  })\n  js.emitter.on('watchify', function storeWatchifyInstance (w) {\n    internals.watchify = w\n  })\n\n  if (lr) {\n    // if live reloading, use watchify\n    args.js.watch = true\n    args.js.output = args.js.output || defaultBundlePath\n\n    lr = typeof lr === 'boolean' ? {} : lr\n    lr.patterns = lr.patterns\n      ? lr.patterns\n      : [path.join(args.servePath, '**/*.html')]\n\n    if (args.css.output) lr.patterns.push(args.css.output)\n\n    lr.port = lr.port || 3000\n    lr.sync = internals.parseSyncOptions(lr.sync || lr.s)\n\n    if (port >= lr.port && port <= lr.port + 2) {\n      throw new Error('Ports ' + lr.port + ' through ' + (lr.port + 2) + 'in use for Live Reload')\n    }\n\n    bs = browserSync.init({\n      proxy: {\n        target: parsedUrl.hostname + ':' + port\n      }\n      , port: lr.port\n      , injectChanges: true\n      , ghostMode: lr.sync\n      , notify: !!lr.quiet\n      , logSnippet: false\n      , open: false\n      , logLevel: lr.verbose ? 'debug' : 'info'\n      , logFileChanges: !!lr.quiet\n      , logConnections: !!lr.quiet\n      // don't minify for speed!\n      , minify: false\n      , startPath: '/default'\n      , logPrefix: 'atomify'\n      , files: lr.patterns.map(function doNotWatchNodeModules (match) {\n        return {\n          match: match\n          , options: {\n            ignored: /node_modules/\n          }\n        }\n      })\n    })\n\n    internals.startFileWatch(lr, args)\n\n    // listen for initial bundle completion before opening\n    js(args.js, function onJSError (err) {\n      if (err) internals.logError(err)\n    }).on('end', function onJSBundled () {\n      if (launch && bs.options && bs.options.port){\n        open(baseUrl + ':' + bs.options.port + serverPath)\n      }\n    })\n  }\n\n  http.createServer(function createServer (req, res) {\n    switch (req.url.split('?')[0]) {\n      case args.js.alias || args.js.entry:\n        if (lr) {\n          res.setHeader('Content-Type', 'text/javascript')\n          res.end(fs.readFileSync(args.js.output, {encoding: 'utf8'}))\n        }\n        else {\n          js(args.js, internals.responder('javascript', res))\n        }\n      break\n\n      case args.css.alias || args.css.entry:\n        css(args.css, internals.responder('css', res))\n      break\n\n      case '/default':\n        internals.serveDefaultPage(req, res, args)\n      break\n\n      default:\n        if (spaMode) internals.serveDefaultPage(req, res, args)\n        else if (handler(req, res, args)) return null\n        else mount(req, res)\n      break\n    }\n  }).listen(port)\n\n  // if live reload is enabled we open after initial bundling\n  if (launch && !lr) open(baseUrl + ':' + port + serverPath)\n}\n\n","/home/travis/build/npmtest/node-npmtest-atomify/node_modules/atomify/lib/htmlifyError.js":"'use strict'\n\nvar internals = {}\n  , AnsiToHTML = require('ansi-to-html')\n  , prettyError = require('prettify-error')\n\ninternals.htmlifyBabelError = function htmlifyBabelError (err, options) {\n  var stack = (new AnsiToHTML({\n    escapeXML: true\n    , fg: '#000'\n    , bg: '#fff'\n  })).toHtml(err.codeFrame)\n    , html = options.head\n      ? '<!doctype html><html><head>'\n        + '<meta charset=\"utf-8\">'\n        + '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">'\n        + '<meta name=\"viewport\" content=\"initial-scale=1,width=device-width,user-scalable=0\">'\n        + '<title>' + err.toString() + '</title>'\n        + '</head><body>'\n      : ''\n\n  html +=\n    +'<div style=\"font-family: \\'helvetica-neue\\', helvetica\">'\n    + '<h1>' + err.toString() + '</h1>'\n    + '</div>'\n    + '<pre><code>' + stack + '</code></pre>'\n\n  if (options.head) html += '</body></html>'\n\n  return html\n}\n\nmodule.exports = function htmlifyError (err, options) {\n  var lines\n    , html\n    , prettyifiedErr\n\n  options || (options = {})\n\n  if (err._babel) return internals.htmlifyBabelError(err, options)\n\n  prettyifiedErr = prettyError(err) || err\n\n  lines = (new AnsiToHTML({escapeXML: true})).toHtml(prettyifiedErr).split('\\n')\n  html = options.head\n    ? '<!doctype html><html><head>'\n      + '<meta charset=\"utf-8\">'\n      + '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">'\n      + '<meta name=\"viewport\" content=\"initial-scale=1,width=device-width,user-scalable=0\">'\n      + '<title>' + err.toString() + '</title>'\n      + '</head><body>'\n    : ''\n\n  // first line is the error\n  html += '<div style=\"font-family: \\'helvetica-neue\\', helvetica\">'\n    + '<h1>' + lines.shift() + '</h1>'\n    + '<pre><code>'\n    // second line is a location marker\n    + lines.shift() + '\\n'\n    // third through fifth lines are code\n    + lines.shift() + '\\n'\n    + lines.shift() + '\\n'\n    + lines.shift() + '\\n'\n    // sixth line is a location marker\n    + lines.shift() + '\\n'\n    + '</code></pre>'\n\n    + '<ul style=\"list-style: none; padding: 0; margin: 0\">'\n      + lines.map(function eachLine (line) {\n        return '<li style=\"margin-bottom: .5em\">'\n          + line.trim()\n            .replace(/^at\\s/, '')\n            .replace(/\\((.*)\\)$/, '<span style=\"color: grey\">$1</span>')\n          + '</li>'\n      }).join('')\n    + '</ul>'\n    + '</div>'\n\n  if (options.head) html += '</body></html>'\n\n  return html\n}\n"}